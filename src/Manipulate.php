<?php

namespace Irmmr\RTLCss;

use Sabberworm\CSS\Value\CSSFunction;
use Sabberworm\CSS\Value\Size;
use Sabberworm\CSS\Value\ValueList;

/**
 * class Manipulate
 *
 * @package Irmmr\RTLCss
 * manipulation of values
 *
 * !! comments are generated by AI
 */
class Manipulate
{
    /**
     * The `complement` function in PHP complements the input value by either subtracting it from 100 or
     * subtracting its arguments from 100%.
     *
     * @param Size|CSSFunction $value value The `complement` function takes a parameter named `$value`.
     */
    public static function complement($value): void
    {
        if ($value instanceof Size) {
            $value->setSize(100 - $value->getSize());
        } else if ($value instanceof CSSFunction) {
            $arguments = implode($value->getListSeparator(), $value->getArguments());
            $arguments = "100% - ($arguments)";
            $value->setListComponents([$arguments]);
        }
    }

    /**
     * The `negate` function in PHP recursively negates the values in a `ValueList` object or sets the size
     * to its negative value in a `Size` object.
     *
     * @param ValueList|Size $value value The `negate` function takes either a `ValueList` object or a `Size` object as
     * its parameter. If the parameter is a `ValueList`, it recursively negates each component of the list.
     * If the parameter is a `Size`, it checks if the size is not zero and
     */
    public static function negate($value): void
    {
        if ($value instanceof CSSFunction && Helpers::strIncludes($value->getName(), 'calc')) {
            $arguments = implode($value->getListSeparator(), $value->getArguments());
            $arguments = "-1*($arguments)";
            $value->setListComponents([$arguments]);

        } else if ($value instanceof ValueList) {
            foreach ($value->getListComponents() as $part) {
                self::negate($part);
            }

        } else if ($value instanceof Size) {
            if ($value->getSize() != 0) {
                $value->setSize(-$value->getSize());
            }

        }
    }
}